{"ast":null,"code":"var _jsxFileName = \"/Users/appletech/Desktop/Inade_frontend/inadereplacement/src/Components/Body/Chatbot/ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { createServicioPreCotizacion, createPreCotizacion, getServicioData } from './../../../Api/Api';\nimport { Widget, addResponseMessage, addLinkSnippet, toggleMsgLoader, toggleWidget } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\nimport './chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: []\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  const [servicioTemporal, setServicioTemporal] = useState({\n    numero: null,\n    cantidad: null\n  });\n  const [servicioAEditar, setServicioAEditar] = useState(null); // puede ser un índice\n  const [campoAEditar, setCampoAEditar] = useState(null);\n  const [pasoExtra, setPasoExtra] = useState(null); // variable temporal para saber que luego viene la cantidad\n  const [servicios, setServicios] = useState([]); // Estado para almacenar los servicios\n\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      //toggleWidget();\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  useEffect(() => {\n    const fetchServicios = async () => {\n      try {\n        const response = await getServicioData(7); // Cambia el ID según sea necesario\n        setServicios(response.data);\n        console.log(\"Servicios:\", response.data);\n      } catch (error) {\n        console.error(\"Error al obtener servicios:\", error);\n      }\n    };\n    /*setTimeout(() => {\n      toggleWidget();\n     }, 3000); */\n\n    fetchServicios();\n  }, []);\n  const validacionNombre = nombre => {\n    const regex = /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/;\n    return regex.test(nombre) && nombre.length <= 15;\n  };\n  const validacionApellido = apellido => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  };\n  const validacionCorreo = correo => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  };\n  const validacionTelefono = telefono => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  };\n  const validacionEmpresa = empresa => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  };\n  /*const validacionFecha = (fecha) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  } */\n  const validacionServicio = servicio => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  };\n  const validacionCantidad = cantidad => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  };\n  const mostrarResumenServicios = servicio => {\n    if (!servicio || servicio.length === 0) {\n      addResponseMessage('No hay servicios agregados.');\n      return;\n    }\n    //const serviciosTotales = [...servicio, ...nuevosServicios];\n    const resumenServicios = generarResumenServicios(servicio, servicios);\n    /*const resumen = servicio.map((s, i) =>\n      `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`\n    ).join('\\n'); */\n\n    addResponseMessage('Resumen de servicios 2:');\n    addResponseMessage(resumenServicios);\n    addResponseMessage('Procesando...');\n    setTimeout(() => {\n      addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n    }, 3000);\n    //addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n  };\n  function generarResumenServicios(serviciosTotales, serviciosData) {\n    return serviciosTotales.map((s, i) => {\n      const info = serviciosData.find(serv => serv.numero === s.numero);\n      const nombre = info ? info.nombreServicio : `Servicio #${s.numero}`;\n      return `${i + 1}. ${nombre}, Cantidad: ${s.cantidad}`;\n    }).join('\\n');\n  }\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0]; // formato YYYY-MM-DD\n\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion: \"MXN\",\n        //telefono: formData.telefono,\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud: fechaSolicitud,\n        fechaCaducidad: fechaCaducidad,\n        descuento: 0,\n        iva: 1,\n        organizacion: 7,\n        tipoMoneda: 1,\n        estado: 8\n      });\n      //console.log(\"Pre-cotización creada:\", preCotizacion);\n      // Aquí puedes obtener el ID de la pre-cotización creada\n      const idPreCotizacion = preCotizacion.data.id; // Ajusta según tu respuesta\n      //console.log(\"ID de la pre-cotización:\", idPreCotizacion);\n      //console.log(\"Servicios a agregar:\", formData.servicios);\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        console.log(\"Servicio a agregar:\", servicio);\n        const servicioEncontrado = servicios.find(s => s.numero === Number(servicio.numero));\n        //console.log(\"Servicio a agregar cantidad:\", servicio.cantidad);\n        //console.log(\"Servicio a agregar numero\", servicio.numero);\n        await createServicioPreCotizacion({\n          descripcion: \"\",\n          precio: \"0\",\n          cantidad: Number(servicio.cantidad) || 0,\n          preCotizacion: idPreCotizacion,\n          servicio: servicioEncontrado.id\n        });\n      }\n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      //console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n  const handleNewUserMessage = msg => {\n    if (campoAEditar !== null) {\n      let valid = false;\n      let nuevoFormData = {\n        ...formData\n      };\n      switch (campoAEditar) {\n        case 1:\n          valid = validacionNombre(msg);\n          if (valid) nuevoFormData.nombre = msg;\n          break;\n        case 2:\n          valid = validacionApellido(msg);\n          if (valid) nuevoFormData.apellido = msg;\n          break;\n        case 3:\n          valid = validacionCorreo(msg);\n          if (valid) nuevoFormData.correo = msg;\n          break;\n        case 4:\n          valid = validacionTelefono(msg);\n          if (valid) nuevoFormData.telefono = msg;\n          break;\n        case 5:\n          valid = validacionEmpresa(msg);\n          if (valid) nuevoFormData.empresa = msg;\n          break;\n        default:\n          addResponseMessage('Opción no válida. Intenta de nuevo.');\n          return;\n      }\n      if (!valid) {\n        addResponseMessage('Dato inválido. Intenta de nuevo:');\n        return;\n      }\n      setFormData(nuevoFormData);\n      setCampoAEditar(null); // salimos del modo edición\n\n      const resumen = `\n    1. Nombre: ${nuevoFormData.nombre}\n    2. Apellido: ${nuevoFormData.apellido}\n    3. Correo: ${nuevoFormData.correo}\n    4. Teléfono: ${nuevoFormData.telefono}\n    5. Empresa: ${nuevoFormData.empresa}\n      `;\n      addResponseMessage('¡Dato actualizado!');\n      addResponseMessage('Resumen actualizado:');\n      addResponseMessage(resumen);\n      addResponseMessage('¿Deseas editar otro dato? Escribe el número o \"no\" para continuar.');\n      return;\n    }\n    const input = msg.trim().toLowerCase();\n\n    // ✅ Cancelar global para ciertos pasos\n    const pasosPermitidosCancelar = [9, 91, 92, 93, 94, 95];\n    if (input === 'cancelar' && pasosPermitidosCancelar.includes(step)) {\n      addResponseMessage('🚫 Proceso cancelado. ¿Quieres volver a empezar? Escribe \"inicio\".');\n      setStep(0);\n      return;\n    }\n\n    // ✅ Regresar al menú de acciones\n    if (input === 'regresar' && [91, 92, 93, 94, 95].includes(step)) {\n      addResponseMessage('🔙 Volviendo al menú anterior...');\n      addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización\\n\\nEscribe \"cancelar\" para salir.');\n      setStep(9);\n      return;\n    }\n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({\n          ...formData,\n          nombre: msg\n        });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if (!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        /*setFormData({ ...formData, apellido: msg });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2); */\n        setFormData({\n          ...formData,\n          apellido: msg\n        });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({\n          ...formData,\n          telefono: msg\n        });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(3);\n        /*if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({ ...formData, correo: msg });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3); */\n        break;\n      case 3:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        /*if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        } */\n        setFormData({\n          ...formData,\n          correo: msg\n        });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = {\n          ...formData,\n          empresa: msg\n        };\n        setFormData(nuevoFormData);\n        addResponseMessage('¡Gracias por completar el formulario!');\n        console.log('Datos finales del formulario:', formData);\n\n        // Mostrar resumen para edición\n        const resumen = `\n          1. Nombre: ${nuevoFormData.nombre}\n          2. Apellido: ${nuevoFormData.apellido}\n          3. Correo: ${nuevoFormData.correo}\n          4. Teléfono: ${nuevoFormData.telefono}\n          5. Empresa: ${nuevoFormData.empresa}\n          `;\n        addResponseMessage('¿Deseas editar algún dato antes de enviar? Escribe el número del campo que deseas editar o \"no\" para continuar.');\n        addResponseMessage(resumen);\n        setStep(111);\n        //addResponseMessage('Ahora comenzaras a agregar los servicios');\n        //addResponseMessage('Escribe el número de servicio:');\n\n        //setStep(6);\n        break;\n      case 5:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        addLinkSnippet({\n          title: 'Ver catálogo de servicios (PDF)',\n          link: '/pdf/Catalogo_de_servicios.pdf',\n          target: '_blank'\n        });\n\n        //setFormData({ ...formData, empresa: msg });\n        addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n        addResponseMessage('Escribe el número de servicio:');\n        break;\n      case 111:\n        //console.log('Campo a editar msg:', msg);\n        if (msg.toLowerCase() === 'no') {\n          //enviarDatos();\n\n          addLinkSnippet({\n            title: 'Ver catálogo de servicios (PDF)',\n            link: '/pdf/Catalogo_de_servicios.pdf',\n            target: '_blank'\n          });\n          //addResponseMessage('Datos enviados correctamente. ¿Deseas crear otra cotización? (sí/no)');\n          addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n          addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n          setStep(7);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un número válido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            console.log('Campo a editar:', opcion);\n            setCampoAEditar(opcion); // regresa al paso correspondiente\n            console.log('Campo a editar:', campoAEditar);\n            const preguntas = ['¿Cuál es tu nombre?', '¿Cuál es tu apellido paterno?', '¿Cuál es tu correo electrónico?', '¿Cuál es tu número telefónico?', '¿Cuál es el nombre de la empresa?'];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion - 1]);\n          }\n        }\n        //setStep(6);\n        break;\n      case 6:\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n        setStep(7);\n        return;\n      //break;\n      case 7:\n        // Entrada de varios números de servicio\n        const partes = msg.split(',').map(p => p.trim());\n        const numeros = [];\n        let hayInvalido = false;\n        for (let parte of partes) {\n          const numero = parseInt(parte, 10);\n          if (!/^\\d+$/.test(parte) || isNaN(numero)) {\n            hayInvalido = true;\n            break;\n          }\n          numeros.push(numero);\n        }\n        if (hayInvalido) {\n          addResponseMessage('❌ Solo se permiten números enteros separados por coma. Intenta de nuevo.');\n          return;\n        }\n        setServicioTemporal({\n          ...servicioTemporal,\n          numeros\n        }); // guarda varios\n        addResponseMessage('¿Cuánto necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n        console.log('Paso actual:', step);\n        setStep(8);\n        console.log('Paso actual:', step);\n        break;\n      case 8:\n        // Entrada de varias cantidades\n        const partesCantidades = msg.split(',').map(c => c.trim());\n        const cantidades = [];\n        let hayCantidadInvalida = false;\n        for (let parte of partesCantidades) {\n          const cantidad = parseInt(parte, 10);\n          if (!/^\\d+$/.test(parte) || isNaN(cantidad)) {\n            hayCantidadInvalida = true;\n            break;\n          }\n          cantidades.push(cantidad);\n        }\n        if (hayCantidadInvalida) {\n          addResponseMessage('❌ Las cantidades deben ser números enteros positivos separados por comas. Intenta de nuevo.');\n          return;\n        }\n        if (cantidades.length !== servicioTemporal.numeros.length) {\n          addResponseMessage('❌ El número de cantidades no coincide con el número de servicios seleccionados. Intenta de nuevo.');\n          return;\n        }\n        const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n          numero,\n          cantidad: cantidades[index]\n        }));\n        setFormData(prev => ({\n          ...prev,\n          servicios: [...prev.servicios, ...nuevosServicios]\n        }));\n        setServicioTemporal({\n          numeros: []\n        });\n        /*addResponseMessage('¿Quieres agregar más servicios? (sí/no)');\n        setStep(9); */\n        const serviciosTotales = [...formData.servicios, ...nuevosServicios];\n        const resumenServicios = generarResumenServicios(serviciosTotales, servicios);\n        addResponseMessage('✅ Servicios agregados:');\n        addResponseMessage(resumenServicios);\n        addResponseMessage('Procesando...');\n        toggleMsgLoader();\n        setTimeout(() => {\n          toggleMsgLoader();\n          addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n        }, 3000);\n        setStep(9);\n        break;\n      case 9:\n        switch (msg.trim()) {\n          case '1':\n            addResponseMessage('Dime qué número(s) de servicio quieres agregar.');\n            setStep(7); // Paso para seleccionar más servicios\n            break;\n          case '2':\n            const resumen = generarResumenServicios(formData.servicios, servicios);\n            addResponseMessage('Servicios actuales:');\n            addResponseMessage(resumen);\n            addResponseMessage('Escribe el número del servicio que deseas editar:');\n            setStep(91); // Paso de edición\n            break;\n          case '3':\n            const resumenDel = generarResumenServicios(formData.servicios, servicios);\n            addResponseMessage('Servicios actuales:');\n            addResponseMessage(resumenDel);\n            addResponseMessage('Escribe el número del servicio que deseas eliminar:');\n            setStep(95); // Paso de eliminación\n            break;\n          case '4':\n            const resumenFinal = generarResumenServicios(formData.servicios, servicios);\n            addResponseMessage('Resumen final de servicios:');\n            addResponseMessage(resumenFinal);\n            addResponseMessage('¿Confirmas que deseas enviar la cotización? (sí/no)');\n            setStep(10); // Paso final para confirmar y enviar\n            break;\n          default:\n            addResponseMessage('Por favor ingresa una opción válida (1, 2, 3 o 4).');\n            break;\n        }\n        break;\n      case 96:\n        if (msg.trim().toLowerCase() === 'cancelar') {\n          addResponseMessage('🚫 Proceso cancelado. ¿Quieres empezar de nuevo? Escribe \"inicio\".');\n          setStep(0);\n          return;\n        } else if (msg.trim().toLowerCase() === 'continuar') {\n          addResponseMessage('Dime qué número(s) de servicio quieres agregar.');\n          setStep(9);\n          return;\n        }\n        break;\n      case 91:\n        if (msg.toLowerCase() === 'no') {\n          /*enviarDatos();\n          setStep(999);\n          addResponseMessage('¡Cotización enviada!');\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(10); */\n          const resumen = generarResumenServicios(formData.servicios, servicios);\n          addResponseMessage('Servicios actuales:');\n          addResponseMessage(resumen);\n          addResponseMessage('¿Deseas eliminar algún servicio? Escribe el número o \"no\" para continuar.');\n          setStep(10); // paso especial para eliminación\n          return;\n        }\n        const indice = parseInt(msg) - 1;\n        if (!isNaN(indice) && formData.servicios[indice]) {\n          setServicioAEditar(indice);\n          addResponseMessage(`¿Qué deseas editar del servicio #${formData.servicios[indice].numero}? (escribe: número o cantidad )`);\n          setStep(92);\n        } else {\n          addResponseMessage('Entrada no válida. Escribe el número del servicio a editar o \"no\" para continuar.');\n        }\n        break;\n      case 92:\n        const opcion = msg.toLowerCase();\n        if (opcion === 'número' || opcion === 'numero') {\n          addResponseMessage('Escribe el nuevo número del servicio:');\n          setStep(93);\n        } else if (opcion === 'cantidad') {\n          addResponseMessage('Escribe la nueva cantidad del servicio:');\n          setStep(94);\n        } else if (opcion === 'ambos') {\n          setPasoExtra('cantidad'); // variable temporal para saber que luego viene la cantidad\n          addResponseMessage('Escribe el nuevo número del servicio:');\n          setStep(93);\n        } else {\n          addResponseMessage('Opción no válida. Escribe: número, cantidad o ambos.');\n        }\n        break;\n      case 93:\n        const nuevoNumero = parseInt(msg);\n        console.log('Nuevo número:', nuevoNumero);\n        if (isNaN(nuevoNumero) || nuevoNumero <= 0) {\n          addResponseMessage('Número inválido. Ingresa un número mayor a 0.');\n          return;\n        }\n        console.log('Servicio a editar1:', servicioAEditar);\n        if (servicioAEditar === null || isNaN(servicioAEditar) || servicioAEditar < 0 || servicioAEditar >= formData.servicios.length) {\n          addResponseMessage('Error interno: no se pudo identificar el servicio a editar.');\n          setStep(91); // volver a lista de servicios\n          return;\n        }\n        console.log('Servicio a editar2:', servicioAEditar);\n        const serviciosEditados = [...formData.servicios];\n        serviciosEditados[servicioAEditar] = {\n          ...serviciosEditados[servicioAEditar],\n          numero: nuevoNumero\n        };\n        console.log('Servicios editados3:', serviciosEditados);\n        setFormData({\n          ...formData,\n          servicios: serviciosEditados\n        });\n        console.log('Servicios editados4:', serviciosEditados);\n        if (pasoExtra === 'cantidad') {\n          setPasoExtra(null);\n          setStep(94);\n          addResponseMessage('Escribe la nueva cantidad del servicio:');\n        } else {\n          setServicioAEditar(null);\n          addResponseMessage('¡Servicio actualizado!1');\n          mostrarResumenServicios(serviciosEditados);\n          setStep(9);\n        }\n        break;\n      case 94:\n        const nuevaCantidad = parseInt(msg);\n        if (isNaN(nuevaCantidad) || nuevaCantidad <= 0) {\n          addResponseMessage('Cantidad inválida. Ingresa un número mayor a 0.');\n          return;\n        }\n        const serviciosActualizados = [...formData.servicios];\n        serviciosActualizados[servicioAEditar].cantidad = nuevaCantidad;\n        setFormData({\n          ...formData,\n          servicios: serviciosActualizados\n        });\n        setServicioAEditar(null);\n        addResponseMessage('¡Cantidad actualizada!');\n        mostrarResumenServicios(serviciosActualizados);\n        setStep(9);\n        break;\n      case 95:\n        const indiceEliminar = parseInt(msg) - 1;\n        if (!isNaN(indiceEliminar) && formData.servicios[indiceEliminar]) {\n          const servicioEliminado = formData.servicios[indiceEliminar];\n          const serviciosActualizados = [...formData.servicios];\n          serviciosActualizados.splice(indiceEliminar, 1);\n          setFormData(prev => ({\n            ...prev,\n            servicios: serviciosActualizados\n          }));\n          addResponseMessage(`🗑️ Servicio #${servicioEliminado.numero} eliminado.`);\n          const resumenActualizado = generarResumenServicios(serviciosActualizados, servicios);\n          addResponseMessage('Servicios restantes:');\n          addResponseMessage(resumenActualizado);\n          addResponseMessage('Procesando...');\n          setTimeout(() => {\n            addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n          }, 3000);\n          setStep(9);\n        } else {\n          addResponseMessage('Número inválido. Intenta nuevamente.');\n        }\n        break;\n      case 10:\n        if (msg.toLowerCase() === 'si') {\n          enviarDatos();\n          setStep(999);\n          addResponseMessage('¡Cotización enviada!');\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(11); // siguiente paso lógico del flujo\n          return;\n        } else if (msg.toLowerCase() === 'no') {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n          setStep(11); // siguiente paso lógico del flujo\n          return;\n        }\n        break;\n      case 11:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: []\n          });\n          setServicioActual({});\n          addResponseMessage(\"Perfecto. ¿Cuál es tu nombre?\");\n          setStep(0);\n        } else {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          setStep(999);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mi chatbot con Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      title: \"Chat De Cotizacion\",\n      subtitle: \"Estamos para ayudarte\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 689,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"XG2yW9bXvBpNJETpiYoK3qzko4s=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useEffect","useState","createServicioPreCotizacion","createPreCotizacion","getServicioData","Widget","addResponseMessage","addLinkSnippet","toggleMsgLoader","toggleWidget","jsxDEV","_jsxDEV","Chatbot","_s","step","setStep","formData","setFormData","nombre","apellido","correo","telefono","empresa","fechaSolicitud","fechaCaducidad","servicios","servicioActual","setServicioActual","hasGreeted","useRef","servicioTemporal","setServicioTemporal","numero","cantidad","servicioAEditar","setServicioAEditar","campoAEditar","setCampoAEditar","pasoExtra","setPasoExtra","setServicios","current","fetchServicios","response","data","console","log","error","validacionNombre","regex","test","length","validacionApellido","validacionCorreo","validacionTelefono","validacionEmpresa","validacionServicio","servicio","validacionCantidad","mostrarResumenServicios","resumenServicios","generarResumenServicios","setTimeout","serviciosTotales","serviciosData","map","s","i","info","find","serv","nombreServicio","join","enviarDatos","today","Date","toISOString","split","futureDate","setDate","getDate","preCotizacion","nombreCliente","apellidoCliente","denominacion","nombreEmpresa","descuento","iva","organizacion","tipoMoneda","estado","idPreCotizacion","id","servicioEncontrado","Number","descripcion","precio","handleNewUserMessage","msg","valid","nuevoFormData","resumen","input","trim","toLowerCase","pasosPermitidosCancelar","includes","title","link","target","opcion","parseInt","isNaN","preguntas","partes","p","numeros","hayInvalido","parte","push","partesCantidades","c","cantidades","hayCantidadInvalida","nuevosServicios","index","prev","resumenDel","resumenFinal","indice","nuevoNumero","serviciosEditados","nuevaCantidad","serviciosActualizados","indiceEliminar","servicioEliminado","splice","resumenActualizado","className","children","fileName","_jsxFileName","lineNumber","columnNumber","subtitle","_c","$RefreshReg$"],"sources":["/Users/appletech/Desktop/Inade_frontend/inadereplacement/src/Components/Body/Chatbot/ChatBot.jsx"],"sourcesContent":["import React,{useEffect, useState} from 'react';\nimport {createServicioPreCotizacion, createPreCotizacion, getServicioData } from './../../../Api/Api';\nimport { Widget, addResponseMessage, addLinkSnippet, toggleMsgLoader, toggleWidget } from 'react-chat-widget-react-18';\nimport 'react-chat-widget-react-18/lib/styles.css';\nimport './chatbot.css';\n\nfunction Chatbot() {\n  const [step, setStep] = React.useState(0);\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellido: '',\n    correo: '',\n    telefono: '',\n    empresa: '',\n    fechaSolicitud: '',\n    fechaCaducidad: '',\n    servicios: [],\n  });\n  const [servicioActual, setServicioActual] = useState({});\n  const hasGreeted = React.useRef(false);\n  const [servicioTemporal, setServicioTemporal] = useState({ numero: null, cantidad: null });\n  const [servicioAEditar, setServicioAEditar] = useState(null); // puede ser un índice\n  const [campoAEditar, setCampoAEditar] = useState(null);\n  const [pasoExtra, setPasoExtra] = useState(null); // variable temporal para saber que luego viene la cantidad\n  const [servicios, setServicios] = useState([]); // Estado para almacenar los servicios\n\n\n\n  React.useEffect(() => {\n    if (!hasGreeted.current) {\n      //toggleWidget();\n      addResponseMessage('¡Hola! Soy un chatbot. ¿Quieres crear una cotización?');\n      addResponseMessage('Para crear una cotización necesito algunos datos.');\n      addResponseMessage(\"¿Cuál es tu nombre?\");\n      hasGreeted.current = true;\n    }\n  }, []);\n  \n  useEffect(() => {\n\n    \n    const fetchServicios = async () => {\n      try {\n        const response = await getServicioData(7); // Cambia el ID según sea necesario\n        setServicios(response.data);\n        console.log(\"Servicios:\", response.data);\n      } catch (error) {\n        console.error(\"Error al obtener servicios:\", error);\n      }\n      \n    };\n    /*setTimeout(() => {\n      toggleWidget();\n\n    }, 3000); */\n\n    fetchServicios();\n    \n  },[]);\n\n\n  const validacionNombre = (nombre) => {\n    const regex = /^([A-Z][a-z]+)(\\s[A-Z][a-z]+)*$/;\n  return regex.test(nombre) && nombre.length <= 15;\n  }\n  const validacionApellido = (apellido) => {\n    const regex = /^[A-Z][a-zA-Z]{0,13}$/;\n    return regex.test(apellido);\n  }\n  const validacionCorreo = (correo) => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(correo);\n  }\n  const validacionTelefono = (telefono) => {\n    const regex = /^[0-9]{10}$/;\n    return regex.test(telefono);\n  }\n  const validacionEmpresa = (empresa) => {\n    const regex = /^[A-Z][a-zA-Z]{0,20}$/;\n    return regex.test(empresa);\n  }\n  /*const validacionFecha = (fecha) => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(fecha);\n  } */\n  const validacionServicio = (servicio) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(servicio);\n  }\n  const validacionCantidad = (cantidad) => {\n    const regex = /^[0-9]{1,3}$/;\n    return regex.test(cantidad);\n  }\n  const mostrarResumenServicios = (servicio) => {\n    if (!servicio || servicio.length === 0) {\n      addResponseMessage('No hay servicios agregados.');\n      return;\n    }\n    //const serviciosTotales = [...servicio, ...nuevosServicios];\n    const resumenServicios = generarResumenServicios(servicio, servicios);\n    /*const resumen = servicio.map((s, i) =>\n      `${i + 1}. Servicio #${s.numero}, Cantidad: ${s.cantidad}`\n    ).join('\\n'); */\n  \n    addResponseMessage('Resumen de servicios 2:');\n    addResponseMessage(resumenServicios);\n    addResponseMessage('Procesando...');\n    setTimeout(()=>{\n      addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n    },3000);\n    //addResponseMessage('¿Deseas editar alguno? Escribe el número del servicio en la lista o \"no\" para continuar.');\n  };\n\n  function generarResumenServicios(serviciosTotales, serviciosData) {\n    return serviciosTotales.map((s, i) => {\n      const info = serviciosData.find(serv => serv.numero === s.numero);\n      const nombre = info ? info.nombreServicio : `Servicio #${s.numero}`;\n      return `${i + 1}. ${nombre}, Cantidad: ${s.cantidad}`;\n    }).join('\\n');\n  }\n\n  const enviarDatos = async () => {\n    try {\n      const today = new Date();\n      const fechaSolicitud = today.toISOString().split('T')[0]; // formato YYYY-MM-DD\n\n      const futureDate = new Date();\n      futureDate.setDate(today.getDate() + 30);\n      const fechaCaducidad = futureDate.toISOString().split('T')[0];\n      // Crear la pre-cotización principal\n      const preCotizacion = await createPreCotizacion({\n        nombreCliente: formData.nombre,\n        apellidoCliente: formData.apellido,\n        correo: formData.correo,\n        denominacion:\"MXN\",\n        //telefono: formData.telefono,\n        nombreEmpresa: formData.empresa,\n        fechaSolicitud:fechaSolicitud,\n        fechaCaducidad:fechaCaducidad,\n        descuento:0,\n        iva:1,\n        organizacion:7,\n        tipoMoneda:1,\n        estado: 8,\n      });\n      //console.log(\"Pre-cotización creada:\", preCotizacion);\n      // Aquí puedes obtener el ID de la pre-cotización creada\n      const idPreCotizacion = preCotizacion.data.id; // Ajusta según tu respuesta\n      //console.log(\"ID de la pre-cotización:\", idPreCotizacion);\n      //console.log(\"Servicios a agregar:\", formData.servicios);\n      // Crear los servicios asociados\n      for (const servicio of formData.servicios) {\n        console.log(\"Servicio a agregar:\", servicio);\n        const servicioEncontrado = servicios.find(s => s.numero === Number(servicio.numero));\n        //console.log(\"Servicio a agregar cantidad:\", servicio.cantidad);\n        //console.log(\"Servicio a agregar numero\", servicio.numero);\n        await createServicioPreCotizacion({\n          descripcion: \"\",\n          precio:\"0\",\n          cantidad:    Number(servicio.cantidad)  || 0,\n          preCotizacion: idPreCotizacion,\n          servicio:    servicioEncontrado.id,\n          \n        });\n      }\n  \n      addResponseMessage(\"✅ ¡Cotización enviada exitosamente!\");\n      //console.log(\"Datos enviados:\", formData);\n    } catch (error) {\n      console.error(\"Error al enviar datos:\", error);\n      addResponseMessage(\"❌ Hubo un error al enviar la cotización. Inténtalo de nuevo.\");\n    }\n  };\n        \n\n  const handleNewUserMessage = (msg) => {\n    if (campoAEditar !== null) {\n      let valid = false;\n      let nuevoFormData = { ...formData };\n    \n      switch (campoAEditar) {\n        case 1:\n          valid = validacionNombre(msg);\n          if (valid) nuevoFormData.nombre = msg;\n          break;\n        case 2:\n          valid = validacionApellido(msg);\n          if (valid) nuevoFormData.apellido = msg;\n          break;\n        case 3:\n          valid = validacionCorreo(msg);\n          if (valid) nuevoFormData.correo = msg;\n          break;\n        case 4:\n          valid = validacionTelefono(msg);\n          if (valid) nuevoFormData.telefono = msg;\n          break;\n        case 5:\n          valid = validacionEmpresa(msg);\n          if (valid) nuevoFormData.empresa = msg;\n          break;\n          default:\n            addResponseMessage('Opción no válida. Intenta de nuevo.');\n            return;\n      }\n    \n      if (!valid) {\n        addResponseMessage('Dato inválido. Intenta de nuevo:');\n        return;\n      }\n    \n      setFormData(nuevoFormData);\n      setCampoAEditar(null); // salimos del modo edición\n    \n      const resumen = `\n    1. Nombre: ${nuevoFormData.nombre}\n    2. Apellido: ${nuevoFormData.apellido}\n    3. Correo: ${nuevoFormData.correo}\n    4. Teléfono: ${nuevoFormData.telefono}\n    5. Empresa: ${nuevoFormData.empresa}\n      `;\n      addResponseMessage('¡Dato actualizado!');\n      addResponseMessage('Resumen actualizado:');\n      addResponseMessage(resumen);\n      addResponseMessage('¿Deseas editar otro dato? Escribe el número o \"no\" para continuar.');\n    \n      return;\n    }\n    const input = msg.trim().toLowerCase();\n\n    // ✅ Cancelar global para ciertos pasos\n    const pasosPermitidosCancelar = [9, 91, 92, 93, 94, 95];\n    if (input === 'cancelar' && pasosPermitidosCancelar.includes(step)) {\n      addResponseMessage('🚫 Proceso cancelado. ¿Quieres volver a empezar? Escribe \"inicio\".');\n      setStep(0);\n      return;\n    }\n\n    // ✅ Regresar al menú de acciones\n    if (input === 'regresar' && [91, 92, 93, 94, 95].includes(step)) {\n      addResponseMessage('🔙 Volviendo al menú anterior...');\n      addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización\\n\\nEscribe \"cancelar\" para salir.');\n      setStep(9);\n      return;\n    }\n    \n    switch (step) {\n      case 0:\n        if (!validacionNombre(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre válido (inicia con mayúscula y máximo 12 letras).');\n          addResponseMessage(\"¿Cuál es tu nombre?\");\n          return;\n        }\n        setFormData({ ...formData, nombre: msg });\n        addResponseMessage('¿Cuál es tu apellido paterno?');\n        setStep(1);\n        break;\n      case 1:\n        if(!validacionApellido(msg)) {\n          addResponseMessage('Por favor, ingresa un apellido válido (inicia con mayúscula y máximo 13 letras).');\n          addResponseMessage('¿Cuál es tu apellido paterno?');\n          return;\n        }\n        /*setFormData({ ...formData, apellido: msg });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(2); */\n        setFormData({ ...formData, apellido: msg });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(2);\n        break;\n      case 2:\n        if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        }\n        setFormData({ ...formData, telefono: msg });\n        addResponseMessage('¿Cuál es tu correo electrónico?');\n        setStep(3);\n        /*if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        setFormData({ ...formData, correo: msg });\n        addResponseMessage('¿Cuál es tu número telefónico?');\n        setStep(3); */\n        break;\n      case 3:\n        if (!validacionCorreo(msg)) {\n          addResponseMessage('Por favor, ingresa un correo electrónico válido.');\n          addResponseMessage('¿Cuál es tu correo electrónico?');\n          return;\n        }\n        /*if (!validacionTelefono(msg)) {\n          addResponseMessage('Por favor, ingresa un número telefónico válido (10 dígitos).');\n          addResponseMessage('¿Cuál es tu número telefónico?');\n          return;\n        } */\n        setFormData({ ...formData, correo: msg });\n        addResponseMessage('¿Cuál es el nombre de la empresa?');\n        setStep(4);\n        break;\n      case 4:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        const nuevoFormData = { ...formData, empresa: msg };\n        setFormData(nuevoFormData);\n        addResponseMessage('¡Gracias por completar el formulario!');\n          console.log('Datos finales del formulario:', formData);\n      \n          // Mostrar resumen para edición\n          const resumen = `\n          1. Nombre: ${nuevoFormData.nombre}\n          2. Apellido: ${nuevoFormData.apellido}\n          3. Correo: ${nuevoFormData.correo}\n          4. Teléfono: ${nuevoFormData.telefono}\n          5. Empresa: ${nuevoFormData.empresa}\n          `;\n          addResponseMessage('¿Deseas editar algún dato antes de enviar? Escribe el número del campo que deseas editar o \"no\" para continuar.');\n          addResponseMessage(resumen);\n          setStep(111);\n        //addResponseMessage('Ahora comenzaras a agregar los servicios');\n        //addResponseMessage('Escribe el número de servicio:');\n        \n        //setStep(6);\n        break;\n      case 5:\n        if (!validacionEmpresa(msg)) {\n          addResponseMessage('Por favor, ingresa un nombre de empresa válido (inicia con mayúscula y máximo 20 letras).');\n          addResponseMessage('¿Cuál es el nombre de la empresa?');\n          return;\n        }\n        addLinkSnippet({\n          title: 'Ver catálogo de servicios (PDF)',\n          link: '/pdf/Catalogo_de_servicios.pdf',\n          target: '_blank',\n        });\n        \n        //setFormData({ ...formData, empresa: msg });\n        addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n        addResponseMessage('Escribe el número de servicio:');\n        \n        \n        break;\n\n      case 111:\n        //console.log('Campo a editar msg:', msg);\n        if (msg.toLowerCase() === 'no') {\n          //enviarDatos();\n          \n          addLinkSnippet({\n            title: 'Ver catálogo de servicios (PDF)',\n            link: '/pdf/Catalogo_de_servicios.pdf',\n            target: '_blank',\n          });\n          //addResponseMessage('Datos enviados correctamente. ¿Deseas crear otra cotización? (sí/no)');\n          addResponseMessage('Ahora se comenzara a agregar los servicios de la cotizacion');\n          addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n          setStep(7);\n        } else {\n          const opcion = parseInt(msg);\n          if (isNaN(opcion) || opcion < 1 || opcion > 5) {\n            addResponseMessage('Por favor, escribe un número válido entre 1 y 5, o \"no\" para continuar.');\n          } else {\n            console.log('Campo a editar:', opcion);\n            setCampoAEditar(opcion); // regresa al paso correspondiente\n            console.log('Campo a editar:', campoAEditar);\n            const preguntas = [\n              '¿Cuál es tu nombre?',\n              '¿Cuál es tu apellido paterno?',\n              '¿Cuál es tu correo electrónico?',\n              '¿Cuál es tu número telefónico?',\n              '¿Cuál es el nombre de la empresa?'\n            ];\n            addResponseMessage(`Vamos a corregir el campo ${opcion}:`);\n            addResponseMessage(preguntas[opcion -1]);\n\n          }\n        }\n        //setStep(6);\n        break;\n      \n      case 6:\n        addResponseMessage('Ahora comenzaras a agregar los servicios');\n        addResponseMessage('Escribe los numeros de servicio separados por comas (Ejemplo: 1,2,3):');\n        \n        setStep(7);\n        return;\n        //break;\n      case 7:\n              // Entrada de varios números de servicio\n        const partes = msg.split(',').map(p => p.trim());\n        const numeros = [];\n        let hayInvalido = false;\n\n        for (let parte of partes) {\n          const numero = parseInt(parte, 10);\n          if (!/^\\d+$/.test(parte) || isNaN(numero)) {\n            hayInvalido = true;\n            break;\n          }\n          numeros.push(numero);\n        }\n\n        if (hayInvalido) {\n          addResponseMessage('❌ Solo se permiten números enteros separados por coma. Intenta de nuevo.');\n          return;\n        }\n        setServicioTemporal({ ...servicioTemporal, numeros }); // guarda varios\n        addResponseMessage('¿Cuánto necesita de cada uno? Ingresa las cantidades separadas por comas en el mismo orden.');\n        console.log('Paso actual:', step);\n\n        setStep(8);\n        console.log('Paso actual:', step);\n\n        break;\n      \n      case 8:\n        // Entrada de varias cantidades\n      const partesCantidades = msg.split(',').map(c => c.trim());\n        const cantidades = [];\n        let hayCantidadInvalida = false;\n\n        for (let parte of partesCantidades) {\n          const cantidad = parseInt(parte, 10);\n          if (!/^\\d+$/.test(parte) || isNaN(cantidad)) {\n            hayCantidadInvalida = true;\n            break;\n          }\n          cantidades.push(cantidad);\n        }\n\n        if (hayCantidadInvalida) {\n          addResponseMessage('❌ Las cantidades deben ser números enteros positivos separados por comas. Intenta de nuevo.');\n          return;\n        }\n\n        if (cantidades.length !== servicioTemporal.numeros.length) {\n          addResponseMessage('❌ El número de cantidades no coincide con el número de servicios seleccionados. Intenta de nuevo.');\n          return;\n        }\n\n        const nuevosServicios = servicioTemporal.numeros.map((numero, index) => ({\n          numero,\n          cantidad: cantidades[index]\n        }));\n\n        setFormData(prev => ({\n          ...prev,\n          servicios: [...prev.servicios, ...nuevosServicios]\n        }));\n        setServicioTemporal({ numeros: [] });\n        /*addResponseMessage('¿Quieres agregar más servicios? (sí/no)');\n        setStep(9); */\n        const serviciosTotales = [...formData.servicios, ...nuevosServicios];\n        const resumenServicios = generarResumenServicios(serviciosTotales, servicios);\n  \n        addResponseMessage('✅ Servicios agregados:');\n        addResponseMessage(resumenServicios);\n        addResponseMessage('Procesando...');\n        toggleMsgLoader();\n        setTimeout(() => {\n          toggleMsgLoader();\n        addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n        },3000);\n        setStep(9);\n        break;\n        \n        case 9:\n          switch (msg.trim()) {\n            case '1':\n              addResponseMessage('Dime qué número(s) de servicio quieres agregar.');\n              setStep(7); // Paso para seleccionar más servicios\n              break;\n            case '2':\n              const resumen = generarResumenServicios(formData.servicios, servicios);\n              addResponseMessage('Servicios actuales:');\n              addResponseMessage(resumen);\n              addResponseMessage('Escribe el número del servicio que deseas editar:');\n              setStep(91); // Paso de edición\n              break;\n            case '3':\n              const resumenDel = generarResumenServicios(formData.servicios, servicios);\n              addResponseMessage('Servicios actuales:');\n              addResponseMessage(resumenDel);\n              addResponseMessage('Escribe el número del servicio que deseas eliminar:');\n              setStep(95); // Paso de eliminación\n              break;\n            case '4':\n              const resumenFinal = generarResumenServicios(formData.servicios, servicios);\n              addResponseMessage('Resumen final de servicios:');\n              addResponseMessage(resumenFinal);\n              addResponseMessage('¿Confirmas que deseas enviar la cotización? (sí/no)');\n              setStep(10); // Paso final para confirmar y enviar\n              break;\n            default:\n              addResponseMessage('Por favor ingresa una opción válida (1, 2, 3 o 4).');\n              break;\n          }\n        break;\n\n        case 96:\n          if (msg.trim().toLowerCase() === 'cancelar') {\n            addResponseMessage('🚫 Proceso cancelado. ¿Quieres empezar de nuevo? Escribe \"inicio\".');\n            setStep(0);\n            return;\n          }else if (msg.trim().toLowerCase() === 'continuar') {\n            addResponseMessage('Dime qué número(s) de servicio quieres agregar.');\n            setStep(9);\n            return;\n          }\n          break;\n\n        case 91:\n            if (msg.toLowerCase() === 'no') {\n            /*enviarDatos();\n            setStep(999);\n            addResponseMessage('¡Cotización enviada!');\n            addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n            setStep(10); */\n            const resumen = generarResumenServicios(formData.servicios, servicios);\n            addResponseMessage('Servicios actuales:');\n            addResponseMessage(resumen);\n            addResponseMessage('¿Deseas eliminar algún servicio? Escribe el número o \"no\" para continuar.');\n            setStep(10); // paso especial para eliminación\n            return;\n            }\n\n            const indice = parseInt(msg) - 1;\n            if (!isNaN(indice) && formData.servicios[indice]) {\n            setServicioAEditar(indice);\n            addResponseMessage(`¿Qué deseas editar del servicio #${formData.servicios[indice].numero}? (escribe: número o cantidad )`);\n            setStep(92);\n            } else {\n            addResponseMessage('Entrada no válida. Escribe el número del servicio a editar o \"no\" para continuar.');\n            }\n            break;\n\n        case 92:\n          const opcion = msg.toLowerCase();\n          if (opcion === 'número' || opcion === 'numero') {\n            addResponseMessage('Escribe el nuevo número del servicio:');\n            setStep(93);\n          } else if (opcion === 'cantidad') {\n            addResponseMessage('Escribe la nueva cantidad del servicio:');\n            setStep(94);\n          } else if (opcion === 'ambos') {\n            setPasoExtra('cantidad'); // variable temporal para saber que luego viene la cantidad\n            addResponseMessage('Escribe el nuevo número del servicio:');\n            setStep(93);\n          } else {\n            addResponseMessage('Opción no válida. Escribe: número, cantidad o ambos.');\n          }\n          \n          break;\n        \n        case 93:\n          const nuevoNumero = parseInt(msg);\n          console.log('Nuevo número:', nuevoNumero);\n          if (isNaN(nuevoNumero) || nuevoNumero <= 0) {\n            addResponseMessage('Número inválido. Ingresa un número mayor a 0.');\n            return;\n          }\n          console.log('Servicio a editar1:', servicioAEditar);\n          if (\n            servicioAEditar === null ||\n            isNaN(servicioAEditar) ||\n            servicioAEditar < 0 ||\n            servicioAEditar >= formData.servicios.length\n          ) {\n            addResponseMessage('Error interno: no se pudo identificar el servicio a editar.');\n            setStep(91); // volver a lista de servicios\n            return;\n          }\n          console.log('Servicio a editar2:', servicioAEditar);\n          const serviciosEditados = [...formData.servicios];\n          serviciosEditados[servicioAEditar] = {\n            ...serviciosEditados[servicioAEditar],\n            numero: nuevoNumero,\n          };\n          console.log('Servicios editados3:', serviciosEditados);\n          setFormData({ ...formData, servicios: serviciosEditados });\n          console.log('Servicios editados4:', serviciosEditados);  \n          if (pasoExtra === 'cantidad') {\n            setPasoExtra(null);\n            setStep(94);\n            addResponseMessage('Escribe la nueva cantidad del servicio:');\n          } else {\n            setServicioAEditar(null);\n            addResponseMessage('¡Servicio actualizado!1');\n            mostrarResumenServicios(serviciosEditados);\n            setStep(9);\n          }\n\n          break;\n        \n        case 94:\n          const nuevaCantidad = parseInt(msg);\n          if (isNaN(nuevaCantidad) || nuevaCantidad <= 0) {\n            addResponseMessage('Cantidad inválida. Ingresa un número mayor a 0.');\n            return;\n          }\n\n          const serviciosActualizados = [...formData.servicios];\n          serviciosActualizados[servicioAEditar].cantidad = nuevaCantidad;\n          setFormData({ ...formData, servicios: serviciosActualizados });\n\n          setServicioAEditar(null);\n          addResponseMessage('¡Cantidad actualizada!');\n          mostrarResumenServicios(serviciosActualizados);\n          setStep(9);\n\n          break;\n\n        case 95:\n          const indiceEliminar = parseInt(msg) - 1;\n          if (!isNaN(indiceEliminar) && formData.servicios[indiceEliminar]) {\n            const servicioEliminado = formData.servicios[indiceEliminar];\n            const serviciosActualizados = [...formData.servicios];\n            serviciosActualizados.splice(indiceEliminar, 1);\n\n            setFormData(prev => ({\n              ...prev,\n              servicios: serviciosActualizados\n            }));\n\n            addResponseMessage(`🗑️ Servicio #${servicioEliminado.numero} eliminado.`);\n            const resumenActualizado = generarResumenServicios(serviciosActualizados, servicios);\n            addResponseMessage('Servicios restantes:');\n            addResponseMessage(resumenActualizado);\n            addResponseMessage('Procesando...');\n            setTimeout(()=>{\n            addResponseMessage('¿Qué deseas hacer ahora?\\n1. Agregar más servicios\\n2. Editar un servicio\\n3. Eliminar un servicio\\n4. Continuar con la cotización');\n            },3000);\n            setStep(9);\n          } else {\n            addResponseMessage('Número inválido. Intenta nuevamente.');\n          }\n          break;\n\n        case 10:\n          if (msg.toLowerCase() === 'si') {\n            enviarDatos();\n            setStep(999);\n            addResponseMessage('¡Cotización enviada!');\n            addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n            setStep(11); // siguiente paso lógico del flujo\n            return;\n          }else if (msg.toLowerCase() === 'no') {\n            addResponseMessage('¡Gracias por usar nuestro servicio!');\n            addResponseMessage('¿Deseas crear otra cotización? (sí/no)');\n            setStep(11); // siguiente paso lógico del flujo\n            return;\n          }\n        \n          \n          break;\n        \n      case 11:\n        if (msg.toLowerCase() === 'sí' || msg.toLowerCase() === 'si') {\n          setFormData({\n            nombre: '',\n            apellido: '',\n            correo: '',\n            telefono: '',\n            empresa: '',\n            fechaSolicitud: '',\n            fechaCaducidad: '',\n            servicios: [],\n          });\n          setServicioActual({});\n          addResponseMessage(\"Perfecto. ¿Cuál es tu nombre?\");\n          setStep(0);\n        } else {\n          addResponseMessage('¡Gracias por usar nuestro servicio!');\n          setStep(999);\n        }\n        break;\n      default:\n        addResponseMessage('Ya hemos terminado. ¡Gracias!');\n    }\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <h1>Mi chatbot con Chat</h1>\n      <Widget\n        handleNewUserMessage={handleNewUserMessage}\n        title=\"Chat De Cotizacion\"\n        subtitle=\"Estamos para ayudarte\"\n      />\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}